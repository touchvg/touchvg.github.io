<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>TouchVG framework: mglnrel结构体 参考</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">TouchVG framework
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- 制作者 Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','搜索');
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public 类型</a> &#124;
<a href="#pub-static-methods">静态 Public 成员函数</a> &#124;
<a href="structmglnrel-members.htm">所有成员列表</a>  </div>
  <div class="headertitle">
<div class="title">mglnrel结构体 参考<div class="ingroups"><a class="el" href="group___g_e_o_m_a_p_i.htm">几何计算函数</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>图形位置关系函数  
 <a href="structmglnrel.htm#details">更多...</a></p>

<p><code>#include &lt;mglnrel.h&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public 类型</h2></td></tr>
<tr class="memitem:a264af26d83a3c7ed7c5ff70228dabdcc"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structmglnrel_a264af26d83a3c7ed7c5ff70228dabdcc.htm#a264af26d83a3c7ed7c5ff70228dabdcc">PtInAreaRet</a> { <a class="el" href="structmglnrel_a264af26d83a3c7ed7c5ff70228dabdcc.htm#a264af26d83a3c7ed7c5ff70228dabdccad428bf7d54fec53dd4fcf26ec0e3108d">kPtInArea</a>, 
<a class="el" href="structmglnrel_a264af26d83a3c7ed7c5ff70228dabdcc.htm#a264af26d83a3c7ed7c5ff70228dabdcca650fde9fcbde819ec5c3e03cfb2ec53a">kPtOutArea</a>, 
<a class="el" href="structmglnrel_a264af26d83a3c7ed7c5ff70228dabdcc.htm#a264af26d83a3c7ed7c5ff70228dabdcca317723bf5358bf26d3c938cbb8ce71a6">kPtOnEdge</a>, 
<a class="el" href="structmglnrel_a264af26d83a3c7ed7c5ff70228dabdcc.htm#a264af26d83a3c7ed7c5ff70228dabdcca11c9078a2e1960457f20ce6d9fc13858">kPtAtVertex</a>
 }</td></tr>
<tr class="separator:a264af26d83a3c7ed7c5ff70228dabdcc"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
静态 Public 成员函数</h2></td></tr>
<tr class="memitem:a1f62a5098fadc99bdc694dbc38786178"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structmglnrel_a1f62a5098fadc99bdc694dbc38786178.htm#a1f62a5098fadc99bdc694dbc38786178">isLeft</a> (const <a class="el" href="class_point2d.htm">Point2d</a> &amp;a, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;b, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;pt)</td></tr>
<tr class="memdesc:a1f62a5098fadc99bdc694dbc38786178"><td class="mdescLeft">&#160;</td><td class="mdescRight">判断点pt是否在有向直线a-&gt;b的左边 (开区间)  <a href="structmglnrel_a1f62a5098fadc99bdc694dbc38786178.htm#a1f62a5098fadc99bdc694dbc38786178">更多...</a><br /></td></tr>
<tr class="separator:a1f62a5098fadc99bdc694dbc38786178"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22aa60b87dbdee4359dbf42e3dda6822"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structmglnrel_a22aa60b87dbdee4359dbf42e3dda6822.htm#a22aa60b87dbdee4359dbf42e3dda6822">isLeft2</a> (const <a class="el" href="class_point2d.htm">Point2d</a> &amp;a, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;b, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;pt, const <a class="el" href="class_tol.htm">Tol</a> &amp;tol)</td></tr>
<tr class="memdesc:a22aa60b87dbdee4359dbf42e3dda6822"><td class="mdescLeft">&#160;</td><td class="mdescRight">判断点pt是否在有向直线a-&gt;b的左边  <a href="structmglnrel_a22aa60b87dbdee4359dbf42e3dda6822.htm#a22aa60b87dbdee4359dbf42e3dda6822">更多...</a><br /></td></tr>
<tr class="separator:a22aa60b87dbdee4359dbf42e3dda6822"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac02c61d7a04c71d7aab44b18b4f60d8c"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structmglnrel_ac02c61d7a04c71d7aab44b18b4f60d8c.htm#ac02c61d7a04c71d7aab44b18b4f60d8c">isLeftOn</a> (const <a class="el" href="class_point2d.htm">Point2d</a> &amp;a, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;b, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;pt)</td></tr>
<tr class="memdesc:ac02c61d7a04c71d7aab44b18b4f60d8c"><td class="mdescLeft">&#160;</td><td class="mdescRight">判断点pt是否在有向直线a-&gt;b的左边或线上 (闭区间)  <a href="structmglnrel_ac02c61d7a04c71d7aab44b18b4f60d8c.htm#ac02c61d7a04c71d7aab44b18b4f60d8c">更多...</a><br /></td></tr>
<tr class="separator:ac02c61d7a04c71d7aab44b18b4f60d8c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36279c31158bce7cf6984f930cdedf4a"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structmglnrel_a36279c31158bce7cf6984f930cdedf4a.htm#a36279c31158bce7cf6984f930cdedf4a">isLeftOn2</a> (const <a class="el" href="class_point2d.htm">Point2d</a> &amp;a, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;b, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;pt, const <a class="el" href="class_tol.htm">Tol</a> &amp;tol)</td></tr>
<tr class="memdesc:a36279c31158bce7cf6984f930cdedf4a"><td class="mdescLeft">&#160;</td><td class="mdescRight">判断点pt是否在有向直线a-&gt;b的左边或线上  <a href="structmglnrel_a36279c31158bce7cf6984f930cdedf4a.htm#a36279c31158bce7cf6984f930cdedf4a">更多...</a><br /></td></tr>
<tr class="separator:a36279c31158bce7cf6984f930cdedf4a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adeed135f486e9e3959310a1d7f913827"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structmglnrel_adeed135f486e9e3959310a1d7f913827.htm#adeed135f486e9e3959310a1d7f913827">isColinear</a> (const <a class="el" href="class_point2d.htm">Point2d</a> &amp;a, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;b, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;pt)</td></tr>
<tr class="memdesc:adeed135f486e9e3959310a1d7f913827"><td class="mdescLeft">&#160;</td><td class="mdescRight">判断点pt是否在直线a-&gt;b的线上  <a href="structmglnrel_adeed135f486e9e3959310a1d7f913827.htm#adeed135f486e9e3959310a1d7f913827">更多...</a><br /></td></tr>
<tr class="separator:adeed135f486e9e3959310a1d7f913827"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8a84806e694b48045845a4af92d29cc"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structmglnrel_ab8a84806e694b48045845a4af92d29cc.htm#ab8a84806e694b48045845a4af92d29cc">isColinear2</a> (const <a class="el" href="class_point2d.htm">Point2d</a> &amp;a, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;b, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;pt, const <a class="el" href="class_tol.htm">Tol</a> &amp;tol)</td></tr>
<tr class="memdesc:ab8a84806e694b48045845a4af92d29cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">判断点pt是否在直线a-&gt;b的线上  <a href="structmglnrel_ab8a84806e694b48045845a4af92d29cc.htm#ab8a84806e694b48045845a4af92d29cc">更多...</a><br /></td></tr>
<tr class="separator:ab8a84806e694b48045845a4af92d29cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5283802d870bbb4cf793e1240a200981"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structmglnrel_a5283802d870bbb4cf793e1240a200981.htm#a5283802d870bbb4cf793e1240a200981">isIntersectProp</a> (const <a class="el" href="class_point2d.htm">Point2d</a> &amp;a, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;b, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;c, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;d)</td></tr>
<tr class="memdesc:a5283802d870bbb4cf793e1240a200981"><td class="mdescLeft">&#160;</td><td class="mdescRight">判断两个线段ab和cd是否相交于线段内部  <a href="structmglnrel_a5283802d870bbb4cf793e1240a200981.htm#a5283802d870bbb4cf793e1240a200981">更多...</a><br /></td></tr>
<tr class="separator:a5283802d870bbb4cf793e1240a200981"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05680c498e342661b528158483ce1ba2"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structmglnrel_a05680c498e342661b528158483ce1ba2.htm#a05680c498e342661b528158483ce1ba2">isBetweenLine</a> (const <a class="el" href="class_point2d.htm">Point2d</a> &amp;a, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;b, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;pt)</td></tr>
<tr class="memdesc:a05680c498e342661b528158483ce1ba2"><td class="mdescLeft">&#160;</td><td class="mdescRight">判断点pt是否在线段ab上(闭区间)  <a href="structmglnrel_a05680c498e342661b528158483ce1ba2.htm#a05680c498e342661b528158483ce1ba2">更多...</a><br /></td></tr>
<tr class="separator:a05680c498e342661b528158483ce1ba2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a51836e085ae9c6864a2360e5b1e304ea"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structmglnrel_a51836e085ae9c6864a2360e5b1e304ea.htm#a51836e085ae9c6864a2360e5b1e304ea">isProjectBetweenLine</a> (const <a class="el" href="class_point2d.htm">Point2d</a> &amp;a, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;b, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;pt)</td></tr>
<tr class="memdesc:a51836e085ae9c6864a2360e5b1e304ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">判断点pt是否投影在线段ab上(闭区间)  <a href="structmglnrel_a51836e085ae9c6864a2360e5b1e304ea.htm#a51836e085ae9c6864a2360e5b1e304ea">更多...</a><br /></td></tr>
<tr class="separator:a51836e085ae9c6864a2360e5b1e304ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76c0e2b56753fcf348f3433691cd7554"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structmglnrel_a76c0e2b56753fcf348f3433691cd7554.htm#a76c0e2b56753fcf348f3433691cd7554">isProjectBetweenRayline</a> (const <a class="el" href="class_point2d.htm">Point2d</a> &amp;a, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;b, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;pt)</td></tr>
<tr class="memdesc:a76c0e2b56753fcf348f3433691cd7554"><td class="mdescLeft">&#160;</td><td class="mdescRight">判断点pt是否投影在射线a-&gt;b上(闭区间)  <a href="structmglnrel_a76c0e2b56753fcf348f3433691cd7554.htm#a76c0e2b56753fcf348f3433691cd7554">更多...</a><br /></td></tr>
<tr class="separator:a76c0e2b56753fcf348f3433691cd7554"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91dca73dd9310e5afb8bf0263141dcc8"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structmglnrel_a91dca73dd9310e5afb8bf0263141dcc8.htm#a91dca73dd9310e5afb8bf0263141dcc8">isBetweenLine2</a> (const <a class="el" href="class_point2d.htm">Point2d</a> &amp;a, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;b, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;pt, const <a class="el" href="class_tol.htm">Tol</a> &amp;tol)</td></tr>
<tr class="memdesc:a91dca73dd9310e5afb8bf0263141dcc8"><td class="mdescLeft">&#160;</td><td class="mdescRight">判断点pt是否在线段ab上  <a href="structmglnrel_a91dca73dd9310e5afb8bf0263141dcc8.htm#a91dca73dd9310e5afb8bf0263141dcc8">更多...</a><br /></td></tr>
<tr class="separator:a91dca73dd9310e5afb8bf0263141dcc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeeb54d3297c3cb96a2ad53d864eecede"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structmglnrel_aeeb54d3297c3cb96a2ad53d864eecede.htm#aeeb54d3297c3cb96a2ad53d864eecede">isBetweenLine3</a> (const <a class="el" href="class_point2d.htm">Point2d</a> &amp;a, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;b, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;pt, <a class="el" href="class_point2d.htm">Point2d</a> *nearpt=(<a class="el" href="class_point2d.htm">Point2d</a> *) 0)</td></tr>
<tr class="memdesc:aeeb54d3297c3cb96a2ad53d864eecede"><td class="mdescLeft">&#160;</td><td class="mdescRight">已知点pt在直线ab上, 判断点pt是否在线段ab上(闭区间)  <a href="structmglnrel_aeeb54d3297c3cb96a2ad53d864eecede.htm#aeeb54d3297c3cb96a2ad53d864eecede">更多...</a><br /></td></tr>
<tr class="separator:aeeb54d3297c3cb96a2ad53d864eecede"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:affa1ba3371850736bbfd7c07770b660e"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structmglnrel_affa1ba3371850736bbfd7c07770b660e.htm#affa1ba3371850736bbfd7c07770b660e">isIntersect</a> (const <a class="el" href="class_point2d.htm">Point2d</a> &amp;a, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;b, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;c, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;d)</td></tr>
<tr class="memdesc:affa1ba3371850736bbfd7c07770b660e"><td class="mdescLeft">&#160;</td><td class="mdescRight">判断两个线段ab和cd是否相交(交点在线段闭区间内)  <a href="structmglnrel_affa1ba3371850736bbfd7c07770b660e.htm#affa1ba3371850736bbfd7c07770b660e">更多...</a><br /></td></tr>
<tr class="separator:affa1ba3371850736bbfd7c07770b660e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab38a4e679b8652ad006d81d17b338ee8"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structmglnrel_ab38a4e679b8652ad006d81d17b338ee8.htm#ab38a4e679b8652ad006d81d17b338ee8">ptToBeeline</a> (const <a class="el" href="class_point2d.htm">Point2d</a> &amp;a, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;b, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;pt)</td></tr>
<tr class="memdesc:ab38a4e679b8652ad006d81d17b338ee8"><td class="mdescLeft">&#160;</td><td class="mdescRight">计算点pt到无穷直线ab的距离  <a href="structmglnrel_ab38a4e679b8652ad006d81d17b338ee8.htm#ab38a4e679b8652ad006d81d17b338ee8">更多...</a><br /></td></tr>
<tr class="separator:ab38a4e679b8652ad006d81d17b338ee8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa295b043b5736a8ad46bce6e2ea733b1"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structmglnrel_aa295b043b5736a8ad46bce6e2ea733b1.htm#aa295b043b5736a8ad46bce6e2ea733b1">ptToBeeline2</a> (const <a class="el" href="class_point2d.htm">Point2d</a> &amp;a, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;b, <a class="el" href="class_point2d.htm">Point2d</a> pt, <a class="el" href="class_point2d.htm">Point2d</a> &amp;ptPerp)</td></tr>
<tr class="memdesc:aa295b043b5736a8ad46bce6e2ea733b1"><td class="mdescLeft">&#160;</td><td class="mdescRight">计算点pt到无穷直线ab的距离  <a href="structmglnrel_aa295b043b5736a8ad46bce6e2ea733b1.htm#aa295b043b5736a8ad46bce6e2ea733b1">更多...</a><br /></td></tr>
<tr class="separator:aa295b043b5736a8ad46bce6e2ea733b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b8294e07ff8348e89c3e56293c5f185"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structmglnrel_a2b8294e07ff8348e89c3e56293c5f185.htm#a2b8294e07ff8348e89c3e56293c5f185">ptToLine</a> (const <a class="el" href="class_point2d.htm">Point2d</a> &amp;a, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;b, <a class="el" href="class_point2d.htm">Point2d</a> pt, <a class="el" href="class_point2d.htm">Point2d</a> &amp;nearpt)</td></tr>
<tr class="memdesc:a2b8294e07ff8348e89c3e56293c5f185"><td class="mdescLeft">&#160;</td><td class="mdescRight">计算点pt到线段ab的最近距离  <a href="structmglnrel_a2b8294e07ff8348e89c3e56293c5f185.htm#a2b8294e07ff8348e89c3e56293c5f185">更多...</a><br /></td></tr>
<tr class="separator:a2b8294e07ff8348e89c3e56293c5f185"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29bf328dbb6dae8ecb745ed98f9f27b8"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structmglnrel_a29bf328dbb6dae8ecb745ed98f9f27b8.htm#a29bf328dbb6dae8ecb745ed98f9f27b8">crossLineAbc</a> (float a1, float b1, float c1, float a2, float b2, float c2, <a class="el" href="class_point2d.htm">Point2d</a> &amp;ptCross, const <a class="el" href="class_tol.htm">Tol</a> &amp;tolVec=<a class="el" href="class_tol_a185668d06ee4c0f3801fb3fce5120fa9.htm#a185668d06ee4c0f3801fb3fce5120fa9">Tol::gTol</a>())</td></tr>
<tr class="memdesc:a29bf328dbb6dae8ecb745ed98f9f27b8"><td class="mdescLeft">&#160;</td><td class="mdescRight">求两条直线(ax+by+c=0)的交点  <a href="structmglnrel_a29bf328dbb6dae8ecb745ed98f9f27b8.htm#a29bf328dbb6dae8ecb745ed98f9f27b8">更多...</a><br /></td></tr>
<tr class="separator:a29bf328dbb6dae8ecb745ed98f9f27b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad991257056009bec74913cd990bb75d1"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structmglnrel_ad991257056009bec74913cd990bb75d1.htm#ad991257056009bec74913cd990bb75d1">cross2Beeline</a> (const <a class="el" href="class_point2d.htm">Point2d</a> &amp;a, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;b, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;c, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;d, <a class="el" href="class_point2d.htm">Point2d</a> &amp;ptCross, float *pu=(float *) 0, float *pv=(float *) 0, const <a class="el" href="class_tol.htm">Tol</a> &amp;tolVec=<a class="el" href="class_tol_a185668d06ee4c0f3801fb3fce5120fa9.htm#a185668d06ee4c0f3801fb3fce5120fa9">Tol::gTol</a>())</td></tr>
<tr class="memdesc:ad991257056009bec74913cd990bb75d1"><td class="mdescLeft">&#160;</td><td class="mdescRight">求两条无穷直线的交点  <a href="structmglnrel_ad991257056009bec74913cd990bb75d1.htm#ad991257056009bec74913cd990bb75d1">更多...</a><br /></td></tr>
<tr class="separator:ad991257056009bec74913cd990bb75d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3ae496037bcbd184fe4a7cea28c8600"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structmglnrel_af3ae496037bcbd184fe4a7cea28c8600.htm#af3ae496037bcbd184fe4a7cea28c8600">cross2Line</a> (const <a class="el" href="class_point2d.htm">Point2d</a> &amp;a, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;b, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;c, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;d, <a class="el" href="class_point2d.htm">Point2d</a> &amp;ptCross, const <a class="el" href="class_tol.htm">Tol</a> &amp;tolVec=<a class="el" href="class_tol_a185668d06ee4c0f3801fb3fce5120fa9.htm#a185668d06ee4c0f3801fb3fce5120fa9">Tol::gTol</a>())</td></tr>
<tr class="memdesc:af3ae496037bcbd184fe4a7cea28c8600"><td class="mdescLeft">&#160;</td><td class="mdescRight">求两条线段的交点  <a href="structmglnrel_af3ae496037bcbd184fe4a7cea28c8600.htm#af3ae496037bcbd184fe4a7cea28c8600">更多...</a><br /></td></tr>
<tr class="separator:af3ae496037bcbd184fe4a7cea28c8600"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae86fa15c164511c28ebc7a5ca4229f99"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structmglnrel_ae86fa15c164511c28ebc7a5ca4229f99.htm#ae86fa15c164511c28ebc7a5ca4229f99">cross2LineV</a> (const <a class="el" href="class_point2d.htm">Point2d</a> &amp;a, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;b, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;c, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;d, float *v1=(float *) 0, float *v2=(float *) 0)</td></tr>
<tr class="memdesc:ae86fa15c164511c28ebc7a5ca4229f99"><td class="mdescLeft">&#160;</td><td class="mdescRight">求两条线段的交点  <a href="structmglnrel_ae86fa15c164511c28ebc7a5ca4229f99.htm#ae86fa15c164511c28ebc7a5ca4229f99">更多...</a><br /></td></tr>
<tr class="separator:ae86fa15c164511c28ebc7a5ca4229f99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0258133cd012b7e954db30f409a18b0"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structmglnrel_ae0258133cd012b7e954db30f409a18b0.htm#ae0258133cd012b7e954db30f409a18b0">crossLineBeeline</a> (const <a class="el" href="class_point2d.htm">Point2d</a> &amp;a, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;b, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;c, const <a class="el" href="class_point2d.htm">Point2d</a> &amp;d, <a class="el" href="class_point2d.htm">Point2d</a> &amp;ptCross, float *pv=(float *) 0, const <a class="el" href="class_tol.htm">Tol</a> &amp;tolVec=<a class="el" href="class_tol_a185668d06ee4c0f3801fb3fce5120fa9.htm#a185668d06ee4c0f3801fb3fce5120fa9">Tol::gTol</a>())</td></tr>
<tr class="memdesc:ae0258133cd012b7e954db30f409a18b0"><td class="mdescLeft">&#160;</td><td class="mdescRight">求线段和直线的交点  <a href="structmglnrel_ae0258133cd012b7e954db30f409a18b0.htm#ae0258133cd012b7e954db30f409a18b0">更多...</a><br /></td></tr>
<tr class="separator:ae0258133cd012b7e954db30f409a18b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6639306544575a2ce988ea609185a510"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structmglnrel_a6639306544575a2ce988ea609185a510.htm#a6639306544575a2ce988ea609185a510">clipLine</a> (<a class="el" href="class_point2d.htm">Point2d</a> &amp;pt1, <a class="el" href="class_point2d.htm">Point2d</a> &amp;pt2, const <a class="el" href="class_box2d.htm">Box2d</a> &amp;box)</td></tr>
<tr class="memdesc:a6639306544575a2ce988ea609185a510"><td class="mdescLeft">&#160;</td><td class="mdescRight">用矩形剪裁线段，Sutherland-Cohen算法  <a href="structmglnrel_a6639306544575a2ce988ea609185a510.htm#a6639306544575a2ce988ea609185a510">更多...</a><br /></td></tr>
<tr class="separator:a6639306544575a2ce988ea609185a510"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2502c3d166c828d2c4da756edba76e7"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structmglnrel_ac2502c3d166c828d2c4da756edba76e7.htm#ac2502c3d166c828d2c4da756edba76e7">ptInArea</a> (const <a class="el" href="class_point2d.htm">Point2d</a> &amp;pt, int count, const <a class="el" href="class_point2d.htm">Point2d</a> *vertexs, int &amp;order, const <a class="el" href="class_tol.htm">Tol</a> &amp;tol=<a class="el" href="class_tol_a185668d06ee4c0f3801fb3fce5120fa9.htm#a185668d06ee4c0f3801fb3fce5120fa9">Tol::gTol</a>(), bool closed=true, int flags=-1, int ignoreVertex=-1)</td></tr>
<tr class="memdesc:ac2502c3d166c828d2c4da756edba76e7"><td class="mdescLeft">&#160;</td><td class="mdescRight">判断一点是否在一多边形范围内  <a href="structmglnrel_ac2502c3d166c828d2c4da756edba76e7.htm#ac2502c3d166c828d2c4da756edba76e7">更多...</a><br /></td></tr>
<tr class="separator:ac2502c3d166c828d2c4da756edba76e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a102898d09707cba3f6cd964e27ac027e"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structmglnrel_a102898d09707cba3f6cd964e27ac027e.htm#a102898d09707cba3f6cd964e27ac027e">isConvex</a> (int count, const <a class="el" href="class_point2d.htm">Point2d</a> *vertexs, bool *acw=(bool *) 0)</td></tr>
<tr class="memdesc:a102898d09707cba3f6cd964e27ac027e"><td class="mdescLeft">&#160;</td><td class="mdescRight">判断多边形是否为凸多边形  <a href="structmglnrel_a102898d09707cba3f6cd964e27ac027e.htm#a102898d09707cba3f6cd964e27ac027e">更多...</a><br /></td></tr>
<tr class="separator:a102898d09707cba3f6cd964e27ac027e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">详细描述</h2>
<div class="textblock"><p>图形位置关系函数 </p>
</div><hr/>该结构体的文档由以下文件生成:<ul>
<li><a class="el" href="mglnrel_8h.htm">mglnrel.h</a></li>
<li><a class="el" href="mglnrel_8cpp.htm">mglnrel.cpp</a></li>
</ul>
</div><!-- contents -->
<hr size="1"><address style="margin: 0 10px"><small>
<a href="https://github.com/rhcad/touchvg" target="_blank">通用矢量图形框架</a>，
版权所有 (C) <a href="https://github.com/rhcad" target="_blank">张云贵</a> 2004-2017，BSD 开源许可证
</small></address>
</body>
</html>